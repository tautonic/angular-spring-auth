<?xml version="1.0" encoding="UTF-8"?>
<hazelcast
        xmlns="http://www.hazelcast.com/schema/config"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
                http://www.hazelcast.com/schema/config
                http://www.hazelcast.com/schema/config/hazelcast-config-2.0.xsd
                ">
    <group>
        <name>${hz.name}</name>
        <password>${environment}-pass</password>
    </group>
    <network>
        <port auto-increment="true">9350</port>
        <join>
            <multicast enabled="${hz.multicast.enabled}">
                <multicast-group>224.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="false">
                <!-- Do not enter addresses here. They are populated by the Hazelcast boostrap process -->
            </tcp-ip>
            <aws enabled="${hz.aws.enabled}">
                <access-key>${aws.access_key}</access-key>
                <secret-key>${aws.access_key}</secret-key>
            </aws>
        </join>
        <interfaces enabled="false">
            <interface>0.0.0.0</interface>
        </interfaces>
    </network>

    <executor-service>
        <core-pool-size>16</core-pool-size>
        <max-pool-size>64</max-pool-size>
        <keep-alive-seconds>60</keep-alive-seconds>
    </executor-service>

    <map name="scheduledTasks">
        <backup-count>1</backup-count>
        <eviction-policy>LRU</eviction-policy>
        <max-size>100</max-size>
    </map>

    <map name="gc-resources">
        <map-store enabled="true">
            <!--
               Number of seconds to delay to call the MapStore.store(key, value).
               If the value is zero then it is write-through so MapStore.store(key, value)
               will be called as soon as the entry is updated.
               Otherwise it is write-behind so updates will be stored after write-delay-seconds
               value by calling Hazelcast.storeAll(map). Default value is 0.
            -->
            <write-delay-seconds>0</write-delay-seconds>

            <properties>
                <!-- mapstore property contains the Spring names of map store implementations -->
                <property name="mapstore">zociaMapStore</property>
                <property name="maploader">zociaMapStore</property>
                <property name="access">rw</property>
            </properties>
        </map-store>
    </map>


    <map name="default">
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>1</backup-count>
        <!--

            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequiently Used).
            NONE is the default.
        -->
        <eviction-policy>LFU</eviction-policy>

        <!-- Entities in the cache will live for a period of two minutes. After that time, they
             will be fetched from the persistence tier.
        -->
        <time-to-live-seconds>120</time-to-live-seconds>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        <max-size policy="used_heap_size">4096</max-size>

        Doesn't seem to play well with time-to-live...
        -->

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>50</eviction-percentage>
    </map>
</hazelcast>